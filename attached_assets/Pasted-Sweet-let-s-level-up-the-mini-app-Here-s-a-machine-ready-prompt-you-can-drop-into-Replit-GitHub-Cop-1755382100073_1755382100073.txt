Sweet‚Äîlet‚Äôs level up the mini-app. Here‚Äôs a machine-ready prompt you can drop into Replit/GitHub Copilot to implement UX upgrades + brand-matched UI (Telegram Mini App / React). It avoids breaking your wallet logic.

‚∏ª

SendrPay Mini-App Upgrade (UX + Branding)

Stack & context
	‚Ä¢	React + Vite (or Next.js), TypeScript.
	‚Ä¢	Telegram Mini Apps SDK (@twa-dev/sdk), SOL backend already in place.
	‚Ä¢	Keep existing wallet/send/history logic; we‚Äôre refactoring UI/UX and adding small utilities.

Branding system

Create a design token file src/theme/tokens.ts:
	‚Ä¢	Colors
	‚Ä¢	brand.primary = #2F7BF6 (SendrPay blue)
	‚Ä¢	brand.primaryHover = #2468D4
	‚Ä¢	ink = #0E1116 (text)
	‚Ä¢	bg = #0B0F14 (app background, dark)
	‚Ä¢	card = #121722
	‚Ä¢	muted = #8592A3
	‚Ä¢	success = #25D366
	‚Ä¢	error = #FF5A5F
	‚Ä¢	warning = #FFB020
	‚Ä¢	Radii: lg: 16px, md: 12px, sm: 8px
	‚Ä¢	Shadow: subtle, 24dp blur for cards
	‚Ä¢	Font: system default + Inter if available, weight 500/700 for headings
	‚Ä¢	Spacing scale: 4,8,12,16,20,24

Add a global style in src/theme/global.css using these tokens; support dark-only first, but structure for light later.

UI cleanup (screens)

1) Home / Wallet
	‚Ä¢	Replace header with compact topbar:
	‚Ä¢	Left ‚ÄúClose‚Äù uses MiniApp.close()
	‚Ä¢	Center: logo (chat-bubble with arrow) + SendrPay
	‚Ä¢	Address pill: one-line, ellipsized, tap to copy ‚Üí toast ‚ÄúCopied‚Äù
	‚Ä¢	Balance card: large number, token badge; add token switcher (SOL / USDC) chip
	‚Ä¢	Primary actions: two big buttons side-by-side with icons
	‚Ä¢	Send (primary)
	‚Ä¢	Receive (secondary, outline)
	‚Ä¢	Quick utils row (tiny buttons): QR, History, Buy SOL (deep link), Settings
	‚Ä¢	Transactions list:
	‚Ä¢	Card rows with icon (in/out), label, note (if provided), amount aligned right, subtle divider
	‚Ä¢	Tap ‚Üí detail sheet (tx hash, fee, note, copy links, open explorer)

2) Send flow polish
	‚Ä¢	Stepper modal with 3 steps: Recipient ‚Üí Amount ‚Üí Review
	‚Ä¢	Recent & Favorites chips in Recipient step
	‚Ä¢	Amount step:
	‚Ä¢	Live fee estimate + net to recipient preview
	‚Ä¢	Currency toggle (SOL / USD)
	‚Ä¢	Review step:
	‚Ä¢	Summary card (recipient, token, amount, fee, total)
	‚Ä¢	Add note field (optional, stored in your DB and shown in history)
	‚Ä¢	Confirm (primary) + Back
	‚Ä¢	Loading state with non-blocking mini spinner; disable double-tap by idempotency key

3) Receive
	‚Ä¢	Big QR of wallet address + copy/share buttons
	‚Ä¢	Tiny hint: ‚ÄúYou need a little SOL for network fees.‚Äù

4) History
	‚Ä¢	Filters: All | Sent | Received | Tips (segmented control)
	‚Ä¢	Date group headers; infinite scroll
	‚Ä¢	Export CSV button (client-gen, include note/txid/amount/token/ts)

5) Settings
	‚Ä¢	Username + linked TG handle
	‚Ä¢	Reactions toggle (send auto ‚Äú‚ù§Ô∏è/üî•/üëç‚Äù on payments)
	‚Ä¢	Default token (SOL/USDC)
	‚Ä¢	Default tip presets: editable chips (1, 5, 10)
	‚Ä¢	Security: ‚ÄúRequire confirm on amounts > X‚Äù
	‚Ä¢	App version, support link

KOL utilities in mini-app

Add a ‚ÄúCreator tools‚Äù card (visible if user is KOL flag):
	‚Ä¢	Tip button generator:
	‚Ä¢	Pick tokens accepted (SOL/USDC/both) + presets
	‚Ä¢	Generates inline keyboard payload and copyable snippet for Telegram messages
	‚Ä¢	Paid group:
	‚Ä¢	Set price + token, shows ‚ÄúJoin button‚Äù preview
	‚Ä¢	‚ÄúCopy button‚Äù to insert into TG posts
	‚Ä¢	Analytics mini tiles: Tips today, Members, Revenue (net)

Micro-features (high impact)
	‚Ä¢	Haptics on success/error (impactLight, notificationSuccess)
	‚Ä¢	Toasts unified (useToast() hook)
	‚Ä¢	Pull-to-refresh on Home to re-fetch balance
	‚Ä¢	Error recovery: friendly messages + Retry CTA
	‚Ä¢	Empty states with iconography

Code tasks
	1.	Create src/theme/ (tokens, global.css, ThemeProvider.tsx)
	2.	Build UI atoms in src/ui/:
	‚Ä¢	Button, IconButton, Card, Input, Segmented, Sheet, Toast
	3.	Refactor screens into src/screens/:
	‚Ä¢	Home.tsx, Send.tsx, Receive.tsx, History.tsx, Settings.tsx
	4.	Add hooks:
	‚Ä¢	useClipboard(), useHaptics(), useToast(), useBalance(token), useTxFeed(filter)
	5.	Implement router (tiny state or wouter) to switch screens without losing MiniApp context.
	6.	Add Favorites:
	‚Ä¢	favorites table (id, label, tgUsername/address)
	‚Ä¢	Chip list + ‚ÄúAdd favorite‚Äù from last recipients
	7.	Tip presets + group price stored per user in settings (already in your DB or localStorage fallback)

Acceptance criteria
	‚Ä¢	UI matches tokens/colors; spacing consistent; all buttons 48px min height; radii applied.
	‚Ä¢	Copy address works with toast. QR renders and shares.
	‚Ä¢	Send flow shows fee & net; confirm guard for large amounts.
	‚Ä¢	History displays notes & opens a detail sheet; CSV export works.
	‚Ä¢	Creator tools produce usable inline button payloads (strings you paste into TG handlers).
	‚Ä¢	No blocking spinners; all actions idempotent; errors recoverable.
	‚Ä¢	Works inside Telegram Mini App (viewport safe areas respected).

Example snippets

Theme tokens

// src/theme/tokens.ts
export const tokens = {
  color: {
    primary: "#2F7BF6",
    primaryHover: "#2468D4",
    ink: "#0E1116",
    bg: "#0B0F14",
    card: "#121722",
    muted: "#8592A3",
    success: "#25D366",
    error: "#FF5A5F",
    warning: "#FFB020",
  },
  radius: { lg: "16px", md: "12px", sm: "8px" },
  shadow: { card: "0 10px 30px rgba(0,0,0,0.25)" },
  space: (n: number) => `${n * 4}px`,
};

Home header + balance

// src/screens/Home.tsx (excerpt)
return (
  <div className="page">
    <Header title="SendrPay" />
    <AddressPill value={address} onCopy={() => toast("Copied")} />
    <Card className="balance">
      <div className="row">
        <Balance amount={balance} token={token} />
        <TokenSwitcher value={token} onChange={setToken} />
      </div>
      <div className="actions">
        <Button onClick={() => nav("/send")} primary>Send</Button>
        <Button onClick={() => nav("/receive")} variant="outline">Receive</Button>
      </div>
    </Card>
    <QuickRow />
    <TxList filter="all" />
  </div>
);

Send review with fee & net

const feePct = token === "SOL" ? sendFeePct.sol : sendFeePct.usdc;
const fee = amount * feePct;
const total = amount;            // sender-pays or receiver-pays depending on flow you already set
const net = amount - fee;

<ReviewCard
  rows={[
    ["To", short(recipient)],
    ["Amount", fmt(amount, token)],
    ["Platform fee", fmt(fee, token)],
    ["Net to recipient", fmt(net, token)],
  ]}
/>

Creator tool output (inline button payloads)

// Example: Tip buttons config returned to KOL for TG
// Your bot reads callback_data like "tip:USDC:5" or "join:USDC:1"
{
  inline_keyboard: [
    [{ text: "üíñ Tip 1 USDC", callback_data: "tip:USDC:1" },
     { text: "üíñ Tip 5 USDC", callback_data: "tip:USDC:5" },
     { text: "üíñ Tip 10 USDC", callback_data: "tip:USDC:10" }],
    [{ text: "üîê Join Private Group (1 USDC)", callback_data: "join:USDC:1" }]
  ]
}

QA checklist
	‚Ä¢	Visual: matches brand colors, rounded cards, consistent spacing
	‚Ä¢	Copy address ‚Üí toast
	‚Ä¢	QR shows + share works
	‚Ä¢	Send flow: recent/favorites appear; fee & net correct; confirm guard triggers
	‚Ä¢	History loads fast; detail sheet opens; CSV exports
	‚Ä¢	Creator tool generates tip/join JSON that your bot accepts
	‚Ä¢	No UI jank inside Mini App; safe-area padding for iOS

‚∏ª

If you want, I can also generate the styles (CSS) and a ready-to-paste Home.tsx with the balance card + actions exactly in your screenshots, using the tokens above.