// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  telegramId     String?   @unique
  discordId      String?   @unique
  handle         String?
  email          String?   @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  activeWalletId Int?
  isKol          Boolean   @default(false)

  // Relations
  wallets         Wallet[]
  paymentsFrom    Payment[] @relation("FromUser")
  paymentsTo      Payment[] @relation("ToUser")
  giveawayEntries GiveawayEntry[]
  linkCodes       LinkCode[]
  socialLinks     SocialLink[]
  sessions        Session[]
  oauthAccounts   OAuthAccount[]
  kolSettings     KolSettings?
  groupAccess     GroupAccess[] @relation("GroupMember")
  ownedGroups     GroupAccess[] @relation("GroupOwner")
  subscriptions   Subscription[] @relation("SubscriptionMember")
  ownedSubscriptions Subscription[] @relation("SubscriptionOwner")

  @@map("users")
}

model Wallet {
  id         Int      @id @default(autoincrement())
  userId     Int
  label      String?  // "custodial" | "phantom" | "imported"
  address    String   @unique
  encPrivKey Bytes?   // Encrypted private key for custodial wallets
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isActive   Boolean  @default(true)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([address])
  @@index([isActive])
  @@map("wallets")
}

model Token {
  mint      String  @id
  ticker    String  @unique
  name      String?
  decimals  Int
  icon      String?
  enabled   Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ticker])
  @@index([enabled])
  @@map("tokens")
}

model Chat {
  chatId        String   @id
  type          String   // "group" | "supergroup" | "channel"
  title         String?
  whitelisted   Boolean  @default(false)
  tipping       Boolean  @default(true)
  defaultTicker String?  // e.g., "USDC"
  feeBps        Int?     // Override global fee rate
  feeMinRaw     String?  // Override fee minimum for default token
  maxTipAmount  String?  // Maximum tip amount (raw units)
  dailyLimit    String?  // Daily spending limit per user (raw units)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([whitelisted])
  @@index([type])
  @@map("chats")
}

model Payment {
  id             String   @id @default(cuid())
  clientIntentId String   @unique
  chatId         String?
  fromUserId     Int?
  toUserId       Int?
  fromWallet     String
  toWallet       String
  mint           String   // Token mint address or "SOL"
  amountRaw      String   // Raw amount as string (bigint)
  feeRaw         String   // Fee amount as string (bigint)
  serviceFeeRaw  String?  // Service fee amount as string (bigint)
  serviceFeeToken String? // Mint address of token used for service fee
  platformFeeRaw String?  // Platform fee amount (2% tips, 5% group access)
  paymentType    String   @default("payment") // "payment" | "tip" | "group_access"
  note           String?
  status         String   // "pending" | "sent" | "confirmed" | "failed" | "refunded" | "expired" | "awaiting_confirmation"
  txSig          String?  // Transaction signature
  errorMsg       String?  // Error message if failed
  retryCount     Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  from User? @relation("FromUser", fields: [fromUserId], references: [id], onDelete: SetNull)
  to   User? @relation("ToUser", fields: [toUserId], references: [id], onDelete: SetNull)

  @@index([clientIntentId])
  @@index([txSig])
  @@index([status])
  @@index([fromUserId])
  @@index([toUserId])
  @@index([chatId])
  @@index([createdAt])
  @@map("payments")
}

model Escrow {
  id           String   @id @default(cuid())
  chatId       String?
  payerWallet  String   // Wallet that funded the escrow
  payeeHandle  String   // Telegram handle of intended recipient
  payeeTid     String?  // Telegram ID when known
  payeeWallet  String?  // Recipient wallet (filled when claimed)
  mint         String   // Token mint address or "SOL"
  amountRaw    String   // Amount to release (excluding fee)
  feeRaw       String   // Fee amount held in escrow
  note         String?
  status       String   // "open" | "claimed" | "refunded" | "expired"
  expiresAt    DateTime
  txSigFund    String?  // Transaction signature for funding
  txSigRelease String?  // Transaction signature for release/refund
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([status])
  @@index([expiresAt])
  @@index([payeeTid])
  @@index([payeeHandle])
  @@map("escrows")
}

model Giveaway {
  id            String   @id @default(cuid())
  chatId        String
  hostUserId    Int
  hostWallet    String
  amount        String   // Raw amount
  mint          String   // Token mint
  description   String
  maxWinners    Int      @default(1)
  entryCount    Int      @default(0)
  status        String   // "active" | "drawn" | "cancelled" | "expired"
  messageId     Int?     // Telegram message ID
  expiresAt     DateTime?
  drawnAt       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  entries GiveawayEntry[]

  @@index([chatId])
  @@index([status])
  @@index([expiresAt])
  @@map("giveaways")
}

model GiveawayEntry {
  id          Int      @id @default(autoincrement())
  giveawayId  String
  userId      Int
  userWallet  String
  enteredAt   DateTime @default(now())
  won         Boolean  @default(false)
  prizeAmount String?  // Amount won (if winner)
  txSig       String?  // Payout transaction

  // Relations
  giveaway Giveaway @relation(fields: [giveawayId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([giveawayId, userId])
  @@index([giveawayId])
  @@index([userId])
  @@map("giveaway_entries")
}

model LinkCode {
  id        String   @id @default(cuid())
  code      String   @unique
  userId    Int
  platform  String   // "telegram" | "discord"
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([code])
  @@index([expiresAt])
  @@map("link_codes")
}

model AdminAction {
  id          Int      @id @default(autoincrement())
  adminUserId String   // Telegram ID of admin
  action      String   // Action type: "token_add", "fee_update", etc.
  target      String?  // Target of action (token ticker, chat ID, etc.)
  oldValue    String?  // Previous value (for auditing)
  newValue    String?  // New value
  metadata    String?  // Additional JSON metadata
  createdAt   DateTime @default(now())

  @@index([adminUserId])
  @@index([action])
  @@index([createdAt])
  @@map("admin_actions")
}

model SystemStats {
  id             Int      @id @default(autoincrement())
  date           DateTime @unique @default(now())
  totalUsers     Int      @default(0)
  totalPayments  Int      @default(0)
  totalVolumeSol String   @default("0") // Total volume in SOL equivalent
  newUsers       Int      @default(0)
  newPayments    Int      @default(0)
  failedPayments Int      @default(0)
  activeEscrows  Int      @default(0)
  createdAt      DateTime @default(now())

  @@index([date])
  @@map("system_stats")
}

model Transaction {
  id                    String   @id @default(cuid())
  signature             String   @unique
  senderTelegramId      String
  recipientTelegramId   String?
  recipientAddress      String
  amount                String
  tokenMint             String
  tokenTicker           String
  fee                   String?
  serviceFee            String?
  note                  String?
  type                  String   // "payment", "tip", "split", "giveaway", "withdrawal"
  status                String   @default("confirmed") // "pending", "confirmed", "failed"
  reactionSent          Boolean  @default(false) // Track if recipient has reacted
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([signature])
  @@index([senderTelegramId])
  @@index([recipientTelegramId])
  @@index([status])
  @@index([createdAt])
  @@map("transactions")
}

model PendingThankYou {
  id                    String   @id @default(cuid())
  recipientTelegramId   String   @unique
  signature             String
  type                  String   @default("message") // "message", "gif"
  createdAt             DateTime @default(now())

  @@index([recipientTelegramId])
  @@index([signature])
  @@map("pending_thank_yous")
}

model SocialLink {
  id         Int     @id @default(autoincrement())
  platform   String  // "telegram" | "discord" | "twitter"
  platformId String  // tg user id / discord snowflake / twitter user id
  handle     String?
  userId     Int
  user       User    @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  
  @@unique([platform, platformId])
  @@index([userId])
  @@map("social_links")
}

model OAuthAccount {
  id           Int      @id @default(autoincrement())
  provider     String   // "discord" | "twitter"
  providerId   String   // discord user id / twitter id
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  
  @@unique([provider, providerId])
  @@index([userId])
  @@map("oauth_accounts")
}

model MagicCode {
  id        String   @id @default(cuid())
  userId    Int?
  email     String?
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@index([code])
  @@index([email])
  @@index([expiresAt])
  @@map("magic_codes")
}

model Session {
  id        String   @id @default(cuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model KolSettings {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  acceptedTipTokens   String[] // Array of token tickers accepted for tips (e.g., ["USDC", "SOL"])
  groupAccessEnabled  Boolean  @default(false)
  groupAccessToken    String?  // Token ticker for group access payment
  groupAccessPrice    String?  // Price in raw units for group access
  privateGroupChatId  String?  // Telegram chat ID of the private group
  subscriptionType    String?  @default("one_time") // "one_time" | "recurring"
  billingCycle        String?  // "weekly" | "monthly" | "quarterly" | "yearly" (only for recurring)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@index([userId])
  @@map("kol_settings")
}

model GroupAccess {
  id            String   @id @default(cuid())
  memberId      Int
  member        User     @relation("GroupMember", fields: [memberId], references: [id], onDelete: Cascade)
  groupOwnerId  Int
  groupOwner    User     @relation("GroupOwner", fields: [groupOwnerId], references: [id], onDelete: Cascade)
  groupChatId   String   // Telegram chat ID of the private group
  paymentId     String?  // Reference to the payment for this access
  accessGranted DateTime @default(now())
  expiresAt     DateTime? // Optional expiration date for access
  
  @@unique([memberId, groupChatId])
  @@index([memberId])
  @@index([groupOwnerId])
  @@index([groupChatId])
  @@map("group_access")
}

model KolChannel {
  id           String   @id @default(cuid())
  tgChatId     String   @unique // Telegram channel ID
  ownerTgId    String   // Telegram ID of the channel owner
  channelTitle String?  // Channel name/title
  defaultToken String   @default("USDC") // Default token for payments
  defaultPrice String   @default("1000000") // Default price in raw units
  tipPresets   String   @default("[1,5,10,25,50]") // JSON array of tip amounts
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  lockedPosts  LockedPost[]
  
  @@index([ownerTgId])
  @@index([isActive])
  @@map("kol_channels")
}

model LockedPost {
  id             Int      @id @default(autoincrement())
  tgChatId       String   // Foreign key to KolChannel
  channelMsgId   String   // Message ID of the teaser in channel
  contentType    String   // "mixed" for text + optional media
  priceAmount    String   // Price in raw units
  priceToken     String   // "USDC" | "SOL" | "BONK" | "JUP"
  payloadRef     String   @db.Text // JSON object with textContent and attachments array
  title          String?  // Optional display title
  teaserText     String?  @db.Text // Preview/teaser text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  channel        KolChannel @relation(fields: [tgChatId], references: [tgChatId], onDelete: Cascade)
  accessList     PostAccess[]
  
  @@index([tgChatId])
  @@index([channelMsgId])
  @@map("locked_posts")
}

model PostAccess {
  id         Int      @id @default(autoincrement())
  postId     Int      // Foreign key to LockedPost
  userTgId   String   // Telegram ID of the user who has access
  grantedAt  DateTime @default(now())
  txnRef     String?  // Transaction reference/signature
  
  // Relations
  post       LockedPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([postId, userTgId])
  @@index([userTgId])
  @@index([postId])
  @@map("post_access")
}

model DraftPost {
  id             String   @id @default(cuid())
  authorTgId     String   // Telegram ID of the author
  channelId      String   // Channel ID where this will be posted
  channelTitle   String?  // Channel name for reference
  title          String?  // Post title
  teaserText     String?  @db.Text // Preview text
  textContent    String?  @db.Text // Main text content
  attachments    String?  @db.Text // JSON array of attachments
  priceAmount    String?  // Price in raw units
  priceToken     String?  // Token ticker
  displayPrice   String?  // Human readable price
  defaultToken   String?  // Default channel token
  defaultPrice   String?  // Default channel price
  currentStep    String   @default("set_title") // Current step in creation process
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([authorTgId])
  @@index([channelId])
  @@index([currentStep])
  @@map("draft_posts")
}

model Subscription {
  id              String   @id @default(cuid())
  subscriberId    Int      // Member who subscribed
  subscriber      User     @relation("SubscriptionMember", fields: [subscriberId], references: [id], onDelete: Cascade)
  kolOwnerId      Int      // KOL who owns the group
  kolOwner        User     @relation("SubscriptionOwner", fields: [kolOwnerId], references: [id], onDelete: Cascade)
  groupChatId     String   // Telegram chat ID of the private group
  subscriptionType String  // "one_time" | "recurring"
  billingCycle    String?  // "weekly" | "monthly" | "quarterly" | "yearly"
  paymentToken    String   // Token used for payment
  pricePerPeriod  String   // Price in raw units per billing cycle
  status          String   @default("active") // "active" | "paused" | "cancelled" | "expired"
  startDate       DateTime @default(now())
  nextBillingDate DateTime? // When next payment is due
  lastPaidAt      DateTime @default(now())
  failedPayments  Int      @default(0) // Counter for failed payments
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([subscriberId, groupChatId])
  @@index([subscriberId])
  @@index([kolOwnerId])
  @@index([groupChatId])
  @@index([status])
  @@index([nextBillingDate])
  @@map("subscriptions")
}


